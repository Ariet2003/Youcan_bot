from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from app.database import requests as rq
from aiogram.fsm.context import FSMContext
from app.utils import sent_message_add_screen_ids, router
from app.users.user import userStates as st
import app.users.user.userKeyboards as kb
from app import utils
from aiogram.enums import ParseMode



# Function to delete previous messages
async def delete_previous_messages(message: Message):
    # Delete all user messages except "/start"
    for msg_id in sent_message_add_screen_ids['user_messages']:
        try:
            if msg_id != message.message_id or message.text != "/start":
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['user_messages'].clear()

    # Delete all bot messages
    for msg_id in sent_message_add_screen_ids['bot_messages']:
        try:
            if msg_id != message.message_id:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['bot_messages'].clear()

# User's personal account
async def user_account(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)

    user_tg_id = str(message.chat.id)
    language = await rq.get_user_language(user_tg_id)
    name = await rq.get_user_name(user_tg_id)

    await delete_previous_messages(message)



    if language == 'ru':
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–ü—Ä–∏–≤–µ—Ç, {name}'
                    f'\n<a href="https://telegra.ph/lpshchzk-10-30">–ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç?</a> üëà',
        reply_markup=kb.profile_button_ru,
        parse_mode=ParseMode.HTML)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–°–∞–ª–∞–º, {name}'
                    f'\n<a href="https://telegra.ph/Bizdin-ORTga-dayardanuu-%D2%AFch%D2%AFn-Telegram-bot-kandaj-ishtejt-10-30">–ë–æ—Ç –∫–∞–Ω–¥–∞–π –∏—à—Ç–µ–π—Ç?</a> üëà',
            reply_markup=kb.profile_button_kg,
            parse_mode=ParseMode.HTML)

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/photo"
@router.message(Command("photo"))
async def request_photo_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.photo)
async def photo_handler(message: Message):
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ ID
    photo_id = message.photo[-1].file_id
    await message.answer(f"ID –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {photo_id}")

# Back to personal account
@router.callback_query(F.data.in_(['to_home_ru', 'to_home_kg']))
async def go_home_handler(callback_query: CallbackQuery, state: FSMContext):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['bot_messages'].append(callback_query.message.message_id)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    await user_account(callback_query.message, state)


# Handler for creating a question in ru
@router.callback_query(F.data == 'create_test_ru')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(photo=utils.pictureForTheTestCreationScreenKG,
                                                             caption='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.',
                                                             reply_markup=kb.subjects_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


##############################################################
#                    Creating a test in kg                   #
##############################################################

# Handler for creating a question in kg
@router.callback_query(F.data == 'creat_test_kg')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenKG,
        caption='–ö–∞–π—Å—ã –±”©–ª“Ø–∫—Ç”©–Ω —Å—É—Ä–æ–æ —Ç—É–∑“Ø“Ø–Ω“Ø –∫–∞–∞–ª–∞–π—Å—ã–∑?',
        reply_markup=kb.subjects_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Initial handler for entering question text
@router.callback_query(F.data == 'analogy_kg')
async def write_analogy_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenKG,
        caption='–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∂–∞–∑—ã“£—ã–∑.\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering analogy question text
@router.message(st.CreatQuestionsKG.create_question_kg)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    await state.update_data(question_text=question_text, options={})

    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    sent_message = await message.answer(
        f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n\n"
        f"*A) ............................*\n"
        f"–ë) ............................\n"
        f"–í) ............................\n"
        f"–ì) ............................\n\n"
        "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω 'A' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatQuestionsKG.create_option_a_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# General handler for options A, B, V, and G
async def get_option(message: Message, state: FSMContext, option_key: str, next_state):
    data = await state.get_data()
    options = data.get('options', {})
    options[option_key] = message.text
    await state.update_data(options=options)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    option_text = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω —Ç—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω —Ç–∞–Ω–¥—ã“£—ã–∑"
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç "G", —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if option_key == 'G':
        sent_message = await message.answer(
            f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
            f"A) {options.get('A', '............................')}\n"
            f"–ë) {options.get('B', '............................')}\n"
            f"–í) {options.get('V', '............................')}\n"
            f"–ì) {options.get('G', '............................')}\n\n"
            f"{option_text[option_key]}",
            reply_markup=kb.option_buttons_for_creating_an_analogy_kg,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ A, B, V, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        sent_message = await message.answer(
            f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
            f"A) {options.get('A', '............................')}\n"
            f"–ë) {options.get('B', '............................')}\n"
            f"–í) {options.get('V', '............................')}\n"
            f"–ì) {options.get('G', '............................')}\n\n"
            f"–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω '{option_text[option_key]}' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(next_state)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatQuestionsKG.create_option_a_kg)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option(message, state, 'A', st.CreatQuestionsKG.create_option_b_kg)


@router.message(st.CreatQuestionsKG.create_option_b_kg)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option(message, state, 'B', st.CreatQuestionsKG.create_option_v_kg)


@router.message(st.CreatQuestionsKG.create_option_v_kg)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option(message, state, 'V', st.CreatQuestionsKG.create_option_g_kg)


@router.message(st.CreatQuestionsKG.create_option_g_kg)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['kg_creating_an_analogy_a', 'kg_creating_an_analogy_b', 'kg_creating_an_analogy_v', 'kg_creating_an_analogy_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–¢—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã —Ç–∞–Ω–¥—ã“£—ã–∑, –∞–Ω–¥–∞–Ω —Å–æ“£ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø“£“Ø–∑.",
        reply_markup=kb.option_buttons_for_creating_an_analogy_kg,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

