import json
import re
from datetime import datetime
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from app.database import requests as rq
from aiogram.fsm.context import FSMContext
from app.users.user.scripts import is_valid_analogy, is_kyrgyz_words, is_kyrgyz_sentence, is_russian_words, \
    is_russian_sentence, format_analogy
from app.utils import sent_message_add_screen_ids, router
from app.users.user import userStates as st
import app.users.user.userKeyboards as kb
from app import utils
from aiogram.enums import ParseMode
from app.ai_module import chatgpt_request as gpt



# Function to delete previous messages
async def delete_previous_messages(message: Message):
    # Delete all user messages except "/start"
    for msg_id in sent_message_add_screen_ids['user_messages']:
        try:
            if msg_id != message.message_id or message.text != "/start":
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['user_messages'].clear()

    # Delete all bot messages
    for msg_id in sent_message_add_screen_ids['bot_messages']:
        try:
            if msg_id != message.message_id:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['bot_messages'].clear()

# User's personal account
async def user_account(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)

    user_tg_id = str(message.chat.id)
    language = await rq.get_user_language(user_tg_id)
    name = await rq.get_user_name(user_tg_id)

    await delete_previous_messages(message)



    if language == 'ru':
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–ü—Ä–∏–≤–µ—Ç, {name}'
                    f'\n<a href="https://telegra.ph/lpshchzk-10-30">–ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç?</a> üëà',
        reply_markup=kb.profile_button_ru,
        parse_mode=ParseMode.HTML)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–°–∞–ª–∞–º, {name}'
                    f'\n<a href="https://telegra.ph/Bizdin-ORTga-dayardanuu-%D2%AFch%D2%AFn-Telegram-bot-kandaj-ishtejt-10-30">–ë–æ—Ç –∫–∞–Ω–¥–∞–π –∏—à—Ç–µ–π—Ç?</a> üëà',
            reply_markup=kb.profile_button_kg,
            parse_mode=ParseMode.HTML)

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/photo"
@router.message(Command("photo"))
async def request_photo_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.photo)
async def photo_handler(message: Message):
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ ID
    photo_id = message.photo[-1].file_id
    await message.answer(f"ID –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {photo_id}")

# Back to personal account
@router.callback_query(F.data.in_(['to_home_ru', 'to_home_kg']))
async def go_home_handler(callback_query: CallbackQuery, state: FSMContext):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['bot_messages'].append(callback_query.message.message_id)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    await user_account(callback_query.message, state)


# Handler for creating a question in ru
@router.callback_query(F.data == 'create_test_ru')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(photo=utils.pictureForTheTestCreationScreenKG,
                                                             caption='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.',
                                                             reply_markup=kb.subjects_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


##############################################################
#               Creating a analogy test in kg                #
##############################################################

# Handler for creating a question in kg
@router.callback_query(F.data == 'creat_test_kg')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenKG,
        caption='–ö–∞–π—Å—ã –±”©–ª“Ø–∫—Ç”©–Ω —Å—É—Ä–æ–æ —Ç—É–∑“Ø“Ø–Ω“Ø –∫–∞–∞–ª–∞–π—Å—ã–∑?',
        reply_markup=kb.subjects_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Initial handler for entering question text
@router.callback_query(F.data == 'analogy_kg')
async def write_analogy_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnAnalogyKG,
        caption='–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∂–∞–∑—ã“£—ã–∑.\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering analogy question text
@router.message(st.CreatAnalogyQuestionsKG.create_question_kg)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_valid_analogy(question_text):
        if await is_kyrgyz_words(question_text):
            await state.update_data(question_text=question_text, options={})

            sent_message = await message.answer(
                f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n\n"
                f"*A) ............................*\n"
                f"–ë) ............................\n"
                f"–í) ............................\n"
                f"–ì) ............................\n\n"
                "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω 'A' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsKG.create_option_a_kg)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyKG,
                caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω –Ω–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç–∞ –∫–∞—Ç–∞ –±–∞—Ä, –∂–µ –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ —ç–º–µ—Å. –°—É—Ä–∞–Ω—ã—á, —Ç—É—É—Ä–∞ –∂–∞–Ω–∞ –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ –≥–∞–Ω–∞ –∂–∞–∑—ã“£—ã–∑\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyKG,
            caption='–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω —Ç—É—É—Ä–∞ —ç–º–µ—Å –∂–∞–∑–¥—ã“£—ã–∑. –§–æ—Ä–º–∞—Ç—Ç–∞–≥—ã–¥–∞–π –∂–∞–∑—ã“£—ã–∑\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# General handler for options A, B, V, and G
async def get_option_analogy_kg(message: Message, state: FSMContext, option_key: str, next_state):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    option_texts = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω —Ç—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω —Ç–∞–Ω–¥—ã“£—ã–∑"
    }
    if await is_valid_analogy(message.text):
        if await is_kyrgyz_words(message.text):
            data = await state.get_data()
            options = data.get('options', {})
            options[option_key] = message.text
            await state.update_data(options=options)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç "G", —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if option_key == 'G':
                sent_message = await message.answer(
                    f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"{option_texts[option_key]}",
                    reply_markup=kb.option_buttons_for_creating_an_analogy_kg,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ A, B, V, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                sent_message = await message.answer(
                    f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω '{option_texts[option_key]}' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                    parse_mode=ParseMode.MARKDOWN
                )
                await state.set_state(next_state)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyKG,
                caption=f'–°–∏–∑ –∂–∞–∑–≥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ —ç–º–µ—Å. –ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ–≥–∏ —Å”©–∑–¥”©—Ä–¥“Ø –∫–æ–ª–¥–æ–Ω—É–ø, –±—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑.',
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyKG,
            caption=f'–°–∏–∑ –∂–∞–∑–≥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ç—É—É—Ä–∞ —ç–º–µ—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞. –ö”©—Ä—Å”©—Ç“Ø–ª–≥”©–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞–≥—ã–¥–∞–π –∫—ã–ª—ã–ø –±—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑. “Æ–ª–≥“Ø –±–æ—é–Ω—á–∞ –∂–∞–∑—ã“£—ã–∑: _–¢–∞–ª–∞—Å : –®–∞–∞—Ä_',
            parse_mode=ParseMode.MARKDOWN
        )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatAnalogyQuestionsKG.create_option_a_kg)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'A', st.CreatAnalogyQuestionsKG.create_option_b_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_b_kg)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'B', st.CreatAnalogyQuestionsKG.create_option_v_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_v_kg)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'V', st.CreatAnalogyQuestionsKG.create_option_g_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_g_kg)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['kg_creating_an_analogy_a', 'kg_creating_an_analogy_b', 'kg_creating_an_analogy_v', 'kg_creating_an_analogy_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–¢—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑, —ç–º–∏ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø“£“Ø–∑.",
        reply_markup=kb.option_buttons_for_creating_an_analogy_kg_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)




##############################################################
#              Creating a analogy test in ru                 #
##############################################################

# Handler for creating a question in ru
@router.callback_query(F.data == 'creat_test_ru')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenRU,
        caption='–ò–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?',
        reply_markup=kb.subjects_ru
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Initial handler for entering question text
@router.callback_query(F.data == 'analogy_ru')
async def write_analogy_question_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnAnalogyRU,
        caption='–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É.\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering analogy question text
@router.message(st.CreatAnalogyQuestionsRU.create_question_ru)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_valid_analogy(question_text):
        if await is_russian_words(question_text):
            await state.update_data(question_text=question_text, options={})

            sent_message = await message.answer(
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {question_text}\n\n"
                f"*A) ............................*\n"
                f"–ë) ............................\n"
                f"–í) ............................\n"
                f"–ì) ............................\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 'A':",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsRU.create_option_a_ru)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyRU,
                caption='–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyRU,
            caption='–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# General handler for options A, B, V, and G in Russian
async def get_option_analogy_ru(message: Message, state: FSMContext, option_key: str, next_state):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    data = await state.get_data()
    options = data.get('options', {})

    if await is_valid_analogy(message.text):
        if await is_russian_words(message.text):
            options[option_key] = message.text
            await state.update_data(options=options)

            option_text = {
                'A': '–ë',
                'B': '–í',
                'V': '–ì',
                'G': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            }

            if option_key == 'G':
                sent_message = await message.answer(
                    f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"{option_text[option_key]}",
                    reply_markup=kb.option_buttons_for_creating_an_analogy_ru,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                sent_message = await message.answer(
                    f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ '{option_text[option_key]}':",
                    parse_mode=ParseMode.MARKDOWN
                )
                await state.set_state(next_state)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyRU,
                caption=f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.',
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyRU,
            caption=f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: _–ì–æ—Ä–æ–¥ : –°—Ç—Ä–∞–Ω–∞_',
            parse_mode=ParseMode.MARKDOWN
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G in Russian
@router.message(st.CreatAnalogyQuestionsRU.create_option_a_ru)
async def get_option_a_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'A', st.CreatAnalogyQuestionsRU.create_option_b_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_b_ru)
async def get_option_b_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'B', st.CreatAnalogyQuestionsRU.create_option_v_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_v_ru)
async def get_option_v_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'V', st.CreatAnalogyQuestionsRU.create_option_g_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_g_ru)
async def get_option_g_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer in Russian
@router.callback_query(F.data.in_(
    ['ru_creating_an_analogy_a', 'ru_creating_an_analogy_b', 'ru_creating_an_analogy_v', 'ru_creating_an_analogy_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=kb.option_buttons_for_creating_an_analogy_ru_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


##############################################################
#               Creating a grammar test in kg                #
##############################################################

# Initial handler for entering question text
@router.callback_query(F.data == 'grammar_kg')
async def write_grammar_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnGrammerKG,
        caption='–ì—Ä–∞–º–º–∞—Ç—ã–∫–∞–ª—ã–∫ —Å—É—Ä–æ–æ–Ω—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∂–∞–∑—ã“£—ã–∑',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatGrammarQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering grammar question text
@router.message(st.CreatGrammarQuestionsKG.create_question_kg)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_kyrgyz_sentence(question_text) == "–¢—É—É—Ä–∞":
        await state.update_data(question_text=question_text, options={})

        sent_message = await message.answer(
            f"*–°—É—Ä–æ–æ:* {question_text}\n\n"
            f"*A) ............................*\n"
            f"–ë) ............................\n"
            f"–í) ............................\n"
            f"–ì) ............................\n\n"
            "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω 'A' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsKG.create_option_a_kg)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        err_sentences = await is_kyrgyz_sentence(question_text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerKG,
            caption=f'_{err_sentences}._\n–¢—É—É—Ä–∞–ª–∞–ø, —Å—É—Ä–æ–æ–Ω—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑:',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsKG.create_question_kg)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# General handler for options A, B, V, and G
async def get_option_grammar_kg(message: Message, state: FSMContext, option_key: str, next_state):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    option_text = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω —Ç—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω —Ç–∞–Ω–¥—ã“£—ã–∑"
    }

    if await is_kyrgyz_sentence(message.text) == "–¢—É—É—Ä–∞":
        data = await state.get_data()
        options = data.get('options', {})
        options[option_key] = message.text
        await state.update_data(options=options)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç "G", —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if option_key == 'G':
            sent_message = await message.answer(
                f"*–°—É—Ä–æ–æ:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"{option_text[option_key]}",
                reply_markup=kb.option_buttons_for_creating_a_grammar_kg,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ A, B, V, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            sent_message = await message.answer(
                f"*–°—É—Ä–æ–æ:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω '{option_text[option_key]}' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(next_state)
    else:
        err_sentences = await is_kyrgyz_sentence(message.text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerKG,
            caption=f'_{err_sentences}._\n–¢—É—É—Ä–∞–ª–∞–ø, –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑:',
            parse_mode=ParseMode.MARKDOWN
        )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatGrammarQuestionsKG.create_option_a_kg)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'A', st.CreatGrammarQuestionsKG.create_option_b_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_b_kg)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'B', st.CreatGrammarQuestionsKG.create_option_v_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_v_kg)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'V', st.CreatGrammarQuestionsKG.create_option_g_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_g_kg)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['kg_creating_an_grammar_a', 'kg_creating_an_grammar_b', 'kg_creating_an_grammar_v', 'kg_creating_an_grammar_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–°—É—Ä–æ–æ:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–¢—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑, —ç–º–∏ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø“£“Ø–∑.",
        reply_markup=kb.option_buttons_for_creating_a_grammar_kg_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



##############################################################
#                Creating a grammar test in ru               #
##############################################################

# Initial handler for entering question text
@router.callback_query(F.data == 'grammar_ru')
async def write_grammar_question_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnGrammerRU,
        caption='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatGrammarQuestionsRU.create_question_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering grammar question text
@router.message(st.CreatGrammarQuestionsRU.create_question_ru)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    await state.update_data(question_text=question_text, options={})

    if message.text == "/start":
        await user_account(message, state)
        return

    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if await is_russian_sentence(question_text) == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ":
        sent_message = await message.answer(
            f"*–í–æ–ø—Ä–æ—Å:* {question_text}\n\n"
            f"*A) ............................*\n"
            f"–ë) ............................\n"
            f"–í) ............................\n"
            f"–ì) ............................\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 'A':",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsRU.create_option_a_ru)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        err_sentences = await is_russian_sentence(question_text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerRU,
            caption=f'_{err_sentences}._\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ:',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsRU.create_question_ru)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# General handler for options A, B, V, and G
async def get_option_grammar_ru(message: Message, state: FSMContext, option_key: str, next_state):
    data = await state.get_data()
    options = data.get('options', {})
    options[option_key] = message.text
    await state.update_data(options=options)

    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    option_text = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    }

    if await is_russian_sentence(message.text) == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ":
        # Checking if it's the last option to display the final message
        if option_key == 'G':
            sent_message = await message.answer(
                f"*–í–æ–ø—Ä–æ—Å:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"{option_text[option_key]}",
                reply_markup=kb.option_buttons_for_creating_a_grammar_ru,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            sent_message = await message.answer(
                f"*–í–æ–ø—Ä–æ—Å:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{option_text[option_key]}':",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(next_state)
    else:
        err_sentences = await is_russian_sentence(message.text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerRU,
            caption=f'_{err_sentences}._\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–Ω–æ–≤–æ:',
            parse_mode=ParseMode.MARKDOWN
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatGrammarQuestionsRU.create_option_a_ru)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'A', st.CreatGrammarQuestionsRU.create_option_b_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_b_ru)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'B', st.CreatGrammarQuestionsRU.create_option_v_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_v_ru)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'V', st.CreatGrammarQuestionsRU.create_option_g_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_g_ru)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['ru_creating_an_grammar_a', 'ru_creating_an_grammar_b', 'ru_creating_an_grammar_v', 'ru_creating_an_grammar_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–í–æ–ø—Ä–æ—Å:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=kb.option_buttons_for_creating_a_grammar_ru_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Write kg analogy questions to the DB
@router.callback_query(F.data == 'kg_send_an_analogy')
async def write_analogy_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # Script to format analogy string
    formatted_question_text, formatted_option_a, formatted_option_b, formatted_option_v, formatted_option_g = await format_analogy(
        question_text, option_a, option_b, option_v, option_g
    )

    is_not_have = await rq.write_question(user_id=user_id, subject_id=4, content=formatted_question_text,
                                          option_a=formatted_option_a, option_b=formatted_option_b,
                                          option_v=formatted_option_v, option_g=formatted_option_g,
                                          correct_option=correct_option, status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–°–∏–∑–¥–∏–Ω —Å—É—Ä–æ–æ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!'
                    '\n*+5 —Ä—É–±–∏–Ω* üíé –∫–æ—à—É–ª–¥—É.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.clear()
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω —Å—É—Ä–æ–æ –±–∞–∑–∞–¥–∞ –±–∞—Ä —ç–∫–µ–Ω!'
                    '\n–°—É—Ä–∞–Ω—ã—á, –±–∞—à–∫–∞ —Å—É—Ä–æ–æ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write ru analogy questions to the DB
@router.callback_query(F.data == 'ru_send_an_analogy')
async def write_analogy_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # Script to format analogy string
    formatted_question_text, formatted_option_a, formatted_option_b, formatted_option_v, formatted_option_g = await format_analogy(
        question_text, option_a, option_b, option_v, option_g
    )

    is_not_have = await rq.write_question(user_id=user_id, subject_id=3, content=formatted_question_text,
                                          option_a=formatted_option_a, option_b=formatted_option_b,
                                          option_v=formatted_option_v, option_g=formatted_option_g,
                                          correct_option=correct_option, status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'
                    '\n*+5 —Ä—É–±–∏–Ω–æ–≤* üíé –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.clear()
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏, –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                    '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write ru grammar questions to the DB
@router.callback_query(F.data == 'ru_send_an_grammar')
async def write_grammar_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=1, content=question_text, option_a=option_a,
                                          option_b=option_b,
                                          option_v=option_v, option_g=option_g, correct_option=correct_option,
                                          status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'
                    '\n*+5 —Ä—É–±–∏–Ω–æ–≤* üíé –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.clear()
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏, –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                    '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write kg grammar questions to the DB
@router.callback_query(F.data == 'kg_send_an_grammar')
async def write_grammar_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=2, content=question_text, option_a=option_a, option_b=option_b,
                            option_v=option_v, option_g=option_g, correct_option=correct_option, status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–°–∏–∑–¥–∏–Ω —Å—É—Ä–æ–æ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!'
                    '\n*+5 —Ä—É–±–∏–Ω* üíé –∫–æ—à—É–ª–¥—É.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.clear()
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω —Å—É—Ä–æ–æ –±–∞–∑–∞–¥–∞ –±–∞—Ä —ç–∫–µ–Ω!'
                    '\n–°—É—Ä–∞–Ω—ã—á, –±–∞—à–∫–∞ —Å—É—Ä–æ–æ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == "back_to_account")
async def back_to_account(callback_query: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await callback_query.message.delete()


@router.callback_query(F.data == 'vip_ru')
async def vip_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = callback_query.from_user.id

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForGoToVIPRU,
        caption=(
            f'<a href="https://telegra.ph/Bizdin-ORTga-dayardanuu-%D2%AFch%D2%AFn-Telegram-bot-kandaj-ishtejt-10-30">'
            f"–ö–∞–∫–æ–≤—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç—É—Å–∞ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</a> üëà\n\n"
            f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá"
        ),
        reply_markup=kb.whatsapp_button_ru(telegram_id=telegram_id),
        parse_mode=ParseMode.HTML
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'vip_kg')
async def vip_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = callback_query.from_user.id

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForGoToVIPKG,
        caption=(
            f'<a href="https://telegra.ph/Bizdin-ORTga-dayardanuu-%D2%AFch%D2%AFn-Telegram-bot-kandaj-ishtejt-10-30">'
            f"VIP –∫–æ–ª–¥–æ–Ω—É—É—á—É–Ω—É–Ω –∫–∞–Ω–¥–∞–π –∞—Ä—Ç—ã–∫—á—ã–ª—ã–∫—Ç–∞—Ä—ã –±–∞—Ä?</a> üëà\n\n"
            f"–≠–≥–µ—Ä VIP –∫–æ–ª–¥–æ–Ω—É—É—á—É–≥–∞ ”©—Ç“Ø“Ø–Ω“Ø –∫–∞–∞–ª–∞—Å–∞“£—ã–∑ –∂–µ —Å—É—Ä–æ–æ–ª–æ—Ä—É“£—É–∑ –±–æ–ª—Å–æ —Ç”©–º”©–Ω–¥”©–Ω“Ø –±–∞—Å–∫—ã—á—Ç—ã –±–∞—Å–∞“£—ã–∑üëá"
        ),
        reply_markup=kb.whatsapp_button_kg(telegram_id=telegram_id),
        parse_mode=ParseMode.HTML
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'settings_ru')
async def setting_user_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForUserSettingsRU,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—É",
        reply_markup=kb.user_settings_ru
    )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'settings_kg')
async def setting_user_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForUserSettingsKG,
        caption="–°–∏–∑–≥–µ –∫–µ—Ä–µ–∫ –∫–æ–º–∞–Ω–¥–∞–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",
        reply_markup=kb.user_settings_kg
    )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'change_language_kg')
async def change_language_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangeLanguaageKG,
        caption="–°–∏–∑ —á—ã–Ω–¥–∞–ø —Ç–∏–ª–¥–∏ –æ—Ä—É—Å —Ç–∏–ª–∏–Ω–µ –∞–ª–º–∞—à—Ç—ã—Ä—É—É–Ω—É –∫–∞–∞–ª–∞–π—Å—ã–∑–±—ã?\n"
                "–≠–≥–µ—Ä –∫–∞–∞–ª–∞—Å–∞“£—ã–∑ 'ru' –¥–µ–ø –∂–∞–∑—ã“£—ã–∑, –∫–∞–∞–ª–∞–±–∞—Å–∞“£—ã–∑ –∞—Ä—Ç–∫–∞ –∫–∞–π—Ç—É—É–Ω—É –±–∞—Å—ã“£—ã–∑.",
        reply_markup=kb.to_user_account_kg
    )
    await state.set_state(st.ChangeLanguageKG.write_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.ChangeLanguageKG.write_ru)
async def change_language_kg_write_ru(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_telegram_id = message.from_user.id
    input_user = message.text

    if input_user == 'ru':
        is_changed = await rq.set_user_language_to_ru(telegram_id=user_telegram_id)
        if is_changed:
            sent_message = await message.answer(
                text="–°–∏–∑–¥–∏–Ω —Ç–∏–ª –æ—Ä—É—Å —Ç–∏–ª–∏–Ω–µ –∞–ª–º–∞—à—ã–ª–¥—ã.",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–¢–∏–ª–¥–∏ –∞–ª–º–∞—à—Ç—ã—Ä—É—É–¥–∞ –∫–∞—Ç–∞ —á—ã–∫—Ç—ã!",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–°–∏–∑ —Å”©–∑–¥“Ø —Ç—É—É—Ä–∞ —ç–º–µ—Å –∂–∞–∑–¥—ã“£—ã–∑!",
            reply_markup=kb.to_user_account_kg
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()


@router.callback_query(F.data == 'change_language_ru')
async def change_language_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangeLanguaageRU,
        caption="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞ –∫—ã—Ä–≥—ã–∑—Å–∫–∏–π?\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ ¬´kg¬ª, –µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª.",
        reply_markup=kb.to_user_account_kg
    )
    await state.set_state(st.ChangeLanguageRU.write_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.ChangeLanguageRU.write_kg)
async def change_language_ru_write_kg(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_telegram_id = message.from_user.id
    input_user = message.text

    if input_user == 'kg':
        is_changed = await rq.set_user_language_to_kg(telegram_id=user_telegram_id)
        if is_changed:
            sent_message = await message.answer(
                text="–í–∞—à —è–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∫—ã—Ä–≥—ã–∑—Å–∫–∏–π.",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞!",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–ª–æ–≤–æ!",
            reply_markup=kb.to_user_account_ru
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()


@router.callback_query(F.data == 'change_phone_number_ru')
async def prompt_change_phone_number_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangePhoneNumberRU,
        caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb.to_user_account_ru
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(st.ChangePhoneNumberRU.enter_phone_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.message(st.ChangePhoneNumberRU.enter_phone_ru)
async def change_phone_number(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    new_phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r"^\+996\d{9}$", new_phone_number):
        sent_message = await message.answer(
            text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +996XXXXXXXXX.",
            reply_markup=kb.to_user_account_ru)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        telegram_id = message.from_user.id

        is_updated = await rq.update_user_phone_number(telegram_id, new_phone_number)

        if is_updated:
            sent_message = await message.answer(
                text="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=kb.to_user_account_ru)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb.to_user_account_ru)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

    await state.clear()


@router.callback_query(F.data == 'change_phone_number_kg')
async def prompt_change_phone_number_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangePhoneNumberKG,
        caption="–°—É—Ä–∞–Ω—ã—á, –∂–∞“£—ã —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑–¥–∏ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑:",
        reply_markup=kb.to_user_account_kg
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(st.ChangePhoneNumberKG.enter_phone_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.message(st.ChangePhoneNumberKG.enter_phone_kg)
async def change_phone_number(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    new_phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r"^\+996\d{9}$", new_phone_number):
        sent_message = await message.answer(
            text="–ñ–∞—Ä–∞–∫—Å—ã–∑ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏. –ù–æ–º–µ—Ä–¥–∏ +996–•–•–•–•–•–•–•–• —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.",
            reply_markup=kb.to_user_account_kg)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        telegram_id = message.from_user.id

        is_updated = await rq.update_user_phone_number(telegram_id, new_phone_number)

        if is_updated:
            sent_message = await message.answer(
                text="–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏“£–∏–∑ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂–∞“£—ã—Ä—Ç—ã–ª–¥—ã.",
                reply_markup=kb.to_user_account_kg)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏ –∂–∞“£—ã—Ä—Ç—ã–ª–≥–∞–Ω –∂–æ–∫. –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∫–∞–π—Ä–∞ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑.",
                reply_markup=kb.to_user_account_kg)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
@router.callback_query(F.data == 'current_status_ru')
async def current_status_ru(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_status = await rq.get_user_status_ru(telegram_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_status == "VIP":
        status_message = (
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: VIP.\n"
        )
    elif user_status != "VIP":
        status_message = (
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –û–±—ã—á–Ω—ã–π.\n"
        )
    else:
        status_message = "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."

    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForMyStatusRU,
        caption=status_message,
        reply_markup=kb.to_user_account_ru
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
@router.callback_query(F.data == 'current_status_kg')
async def current_status_kg(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_status = await rq.get_user_status_kg(telegram_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_status == "VIP":
        status_message = (
            f"–°–∏–∑–¥–∏–Ω —Å—Ç–∞—Ç—É—Å: VIP.\n"
        )
    elif user_status != "VIP":
        status_message = (
            f"–°–∏–∑–¥–∏–Ω —Å—Ç–∞—Ç—É—Å: –ñ”©–Ω”©–∫”©–π.\n"
        )
    else:
        status_message = "–°—Ç–∞—Ç—É—Å –±–µ–ª–≥–∏—Å–∏–∑. –ë–∞–ª–∫–∏–º, —Å–∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ–ª–≥–æ–Ω —ç–º–µ—Å—Å–∏–∑."

    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForMyStatusKG,
        caption=status_message,
        reply_markup=kb.to_user_account_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'helpdesk_kg')
async def helpdesk_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForFAQKG,
        caption="–ë–æ—Ç –±–æ—é–Ω—á–∞ –∫–∞–Ω–¥–∞–π–¥—ã—Ä –±–∏—Ä —Å—É—Ä–æ–æ–ª–æ—Ä –±–∞—Ä –±–æ–ª—Å–æ —Ç”©–º”©–Ω–¥”©–≥“Ø –±–∞—Å–∫—ã—á—Ç—ã –±–∞—Å.",
        reply_markup=kb.whatsapp_button_without_text_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'helpdesk_ru')
async def helpdesk_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForFAQRU,
        caption="–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=kb.whatsapp_button_without_text_ru
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º/–§–ò–û"
@router.callback_query(F.data == 'change_nickname_ru')
async def change_nickname_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangeNicknameRU,
        caption="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –§–ò–û, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å.",
        reply_markup=kb.to_user_account_ru
    )
    await state.set_state(st.ChangeNicknameRU.enter_nickname_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.ChangeNicknameRU.enter_nickname_ru)
async def change_nickname_ru_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_telegram_id = message.from_user.id
    new_name = message.text
    is_changed = await rq.update_user_name(telegram_id=user_telegram_id, new_name=new_name)

    if is_changed:
        sent_message = await message.answer(
            text="–í–∞—à–µ –§–ò–û –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
            reply_markup=kb.to_user_account_ru
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û!",
            reply_markup=kb.to_user_account_ru
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

    await state.clear()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º/–§–ò–û"
@router.callback_query(F.data == 'change_nickname_kg')
async def change_nickname_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForChangeNicknameKG,
        caption="–ñ–∞“£—ã –§–ò–û –∂–∞–∑—ã“£—ã–∑.",
        reply_markup=kb.to_user_account_kg
    )
    await state.set_state(st.ChangeNicknameKG.enter_nickname_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.ChangeNicknameKG.enter_nickname_kg)
async def change_nickname_kg_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_telegram_id = message.from_user.id
    new_name = message.text
    is_changed = await rq.update_user_name(telegram_id=user_telegram_id, new_name=new_name)

    if is_changed:
        sent_message = await message.answer(
            text="–§–ò–û –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∞–ª–º–∞—à—Ç—ã—Ä—ã–ª–¥—ã!",
            reply_markup=kb.to_user_account_kg
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–§–ò–û –∞–ª–º–∞—à—Ç—ã—Ä—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏!",
            reply_markup=kb.to_user_account_kg
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

    await state.clear()


@router.callback_query(F.data == 'my_profile_ru')
async def my_profile(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await rq.get_user_profile_data(telegram_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_message = (
        f"üåü *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* üåü\n\n"
        f"üÜî *Telegram ID:* {telegram_id}\n"
        f"üë§ *–§–ò–û:* {user_data['name']}\n"
        f"üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {user_data['phone_number']}\n"
        f"üíé *–†—É–±–∏–Ω—ã:* {user_data['rubies']}\n"
        f"üíº *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:* {'VIP' if user_data['subscription_status'] else '–û–±—ã—á–Ω—ã–π'}\n"
        f"üóìÔ∏è *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {user_data['created_at'].strftime('%d-%m-%Y')}\n"
    )

    sent_message = await callback_query.message.answer(
        text=profile_message,
        reply_markup=kb.to_user_account_ru,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'my_profile_kg')
async def my_profile(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await rq.get_user_profile_data(telegram_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_message = (
        f"üåü *–ú–µ–Ω–∏–Ω –ø—Ä–æ—Ñ–∏–ª–∏–º* üåü\n\n"
        f"üÜî *Telegram ID:* {telegram_id}\n"
        f"üë§ *–§–ò–û:* {user_data['name']}\n"
        f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä:* {user_data['phone_number']}\n"
        f"üíé *–†—É–±–∏–Ω:* {user_data['rubies']}\n"
        f"üíº *–°—Ç–∞—Ç—É—Å:* {'VIP' if user_data['subscription_status'] else '–û–±—ã—á–Ω—ã–π'}\n"
        f"üóìÔ∏è *–ö–∞—Ç—Ç–∞–ª–≥–∞–Ω –¥–∞—Ç–∞:* {user_data['created_at'].strftime('%d-%m-%Y')}\n"
    )

    sent_message = await callback_query.message.answer(
        text=profile_message,
        reply_markup=kb.to_user_account_kg,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.callback_query(F.data == 'rating_ru')
async def show_user_ranking(callback_query: CallbackQuery):
    await display_ranking_page(callback_query, page=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
async def display_ranking_page(callback_query: CallbackQuery, page: int):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    page_size = 50
    users = await rq.get_users_ranking(page, page_size)

    if not users:
        if page == 1:
            keyboard = kb.rating_buttons_last_page_ru(page)
            sent_message = await callback_query.message.answer(
                text="–í—ã –¥–æ—à–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.",
                reply_markup=keyboard)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            keyboard = kb.rating_buttons_last_page_ru(page)
            sent_message = await callback_query.message.answer(
                text="–í—ã –¥–æ—à–ª–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.",
                reply_markup=keyboard)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        ranking_text = f"üåü *–†–ï–ô–¢–ò–ù–ì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô* üåü\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}\n\n"
        for idx, (name, rubies) in enumerate(users, start=(page - 1) * page_size + 1):
            ranking_text += f"{idx}. _{name}_ : {rubies} üíé\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page == 1:
            keyboard = kb.rating_buttons_first_page_ru(page)
        else:
            keyboard = kb.rating_buttons_other_pages_ru(page)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        sent_message = await callback_query.message.answer(text=ranking_text, reply_markup=keyboard, parse_mode="Markdown")
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(lambda c: c.data and c.data.startswith("rating_page_"))
async def handle_pagination(callback_query: CallbackQuery):
    page = int(callback_query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    await display_ranking_page(callback_query, page)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –º–µ–Ω—è"
@router.callback_query(F.data == 'find_me_in_rating_ru')
async def find_user_in_ranking(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    rank = await rq.get_user_rank(telegram_id)

    if rank is None:
        await callback_query.message.answer(
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥.",
            reply_markup=kb.to_user_account_ru)
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        page_size = 50
        user_page = (rank - 1) // page_size + 1

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        await display_ranking_page(callback_query, page=user_page)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.callback_query(F.data == 'rating_kg')
async def show_user_ranking_kg(callback_query: CallbackQuery):
    await display_ranking_page_kg(callback_query, page=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
async def display_ranking_page_kg(callback_query: CallbackQuery, page: int):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    page_size = 50
    users = await rq.get_users_ranking(page, page_size)

    if not users:
        if page == 1:
            keyboard = kb.rating_buttons_last_page_kg(page)
            sent_message = await callback_query.message.answer(
                text="C–∏–∑ –∞–∫—ã—Ä–∫—ã –±–µ—Ç–∫–µ –∫–µ–ª–¥–∏“£–∏–∑.",
                reply_markup=keyboard)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            keyboard = kb.rating_buttons_last_page_kg(page)
            sent_message = await callback_query.message.answer(
                text="C–∏–∑ –∞–∫—ã—Ä–∫—ã –±–µ—Ç–∫–µ –∫–µ–ª–¥–∏“£–∏–∑.",
                reply_markup=keyboard)
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        ranking_text = f"üåü *–ö–û–õ–î–û–ù–£–£–ß–£–õ–ê–† –†–ï–ô–¢–ò–ù–ì–ò* üåü\n\n–ë–µ—Ç: {page}\n\n"
        for idx, (name, rubies) in enumerate(users, start=(page - 1) * page_size + 1):
            ranking_text += f"{idx}. _{name}_ : {rubies} üíé\n"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page == 1:
            keyboard = kb.rating_buttons_first_page_kg(page)
        else:
            keyboard = kb.rating_buttons_other_pages_kg(page)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        sent_message = await callback_query.message.answer(text=ranking_text, reply_markup=keyboard, parse_mode="Markdown")
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(lambda c: c.data and c.data.startswith("kg_rating_page_"))
async def handle_pagination(callback_query: CallbackQuery):
    page = int(callback_query.data.split("_")[3])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    await display_ranking_page_kg(callback_query, page)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –º–µ–Ω—è"
@router.callback_query(F.data == 'find_me_in_rating_kg')
async def find_user_in_ranking_kg(callback_query: CallbackQuery):
    telegram_id = callback_query.from_user.id
    rank = await rq.get_user_rank(telegram_id)

    if rank is None:
        await callback_query.message.answer(
            text="–°–∏–∑–¥–∏–Ω —Ä–µ–π—Ç–∏–Ω–≥–∏“£–∏–∑ —Ç–∞–±—ã–ª–≥–∞–Ω –∂–æ–∫.",
            reply_markup=kb.to_user_account_kg)
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        page_size = 50
        user_page = (rank - 1) // page_size + 1

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        await display_ranking_page_kg(callback_query, page=user_page)


#################################################################################
#                  Passing the test in Russian                                  #
#################################################################################
@router.callback_query(F.data == 'take_test_ru')
async def take_test_ru(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForTakeTheTestRU,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.",
        reply_markup=kb.select_subject_ru
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Passing the analogy test in Russian
@router.callback_query(F.data == 'take_analogy_ru')
async def start_analogy_test(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    last_question_index = await rq.get_last_answered_question_index(telegram_id=telegram_id, subject_id=3)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–¥–∞–Ω–Ω–æ–º
    next_question = await rq.get_next_question(last_answered_question_id=last_question_index, subject_id=3)

    if next_question:
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤
        question_text = f"*–ü–∞—Ä–∞:* {next_question['content']}\n"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = kb.generate_answer_keyboard_ru(
            question_id=next_question['question_id'],
            option_a=next_question['option_a'],
            option_b=next_question['option_b'],
            option_v=next_question['option_v'],
            option_g=next_question['option_g']
        )

        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeAnalogyQuestionRU,
            caption=question_text,
            reply_markup=keyboard, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeAnalogyQuestionRU,
            caption="–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, "
                    "—á—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã, "
                    "–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û–¥–Ω–∞–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–∏–Ω–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.",
            reply_markup=kb.take_the_test_again_analogy_ru
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data.startswith("question_"))
async def check_the_correctness(callback_query: CallbackQuery):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(callback_query.message)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'question_123_A'
    callback_data = callback_query.data
    parts = callback_data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É '_'

    if len(parts) >= 3:
        question_id = int(parts[1])  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'question'
        selected_option = parts[2]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (A, B, C, D)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        if selected_option == "A":
            selected_option = "–ê"
        elif selected_option == "B":
            selected_option = "–ë"
        elif selected_option == "V":
            selected_option = "–í"
        elif selected_option == "G":
            selected_option = "–ì"

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ë–î
        question_data = await rq.get_question_and_options(question_id)

        if question_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = await rq.check_answer(question_id, selected_option)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            if is_correct:
                is_update_rubin = await rq.update_rubies(telegram_id=callback_query.from_user.id, rubies_to_add=1)

                if is_update_rubin:
                    user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                    is_update_user_answer = await rq.record_user_answer(
                        user_id=user_id,
                        question_id=question_id,
                        chosen_option=selected_option,
                        is_correct=is_correct,
                        rubies_earned=1)
                    if is_update_user_answer:
                        feedback_text = (f"–í–∞—à –æ—Ç–≤–µ—Ç ({question_data['correct_option']}) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n"
                                         f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ +1 üíé —Ä—É–±–∏–Ω–æ–≤.")
                        photo = utils.PictureForCorrectAnswer
                    else:
                        feedback_text = (
                            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")
                else:
                    feedback_text = (f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä—É–±–∏–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")
            else:
                user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                is_update_user_answer = await rq.record_user_answer(
                    user_id=user_id,
                    question_id=question_id,
                    chosen_option=selected_option,
                    is_correct=is_correct,
                    rubies_earned=0)
                if is_update_user_answer:
                    feedback_text = f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    photo = utils.PictureForWrongAnswer
                else:
                    feedback_text = (
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            question_text = f"–ü–∞—Ä–∞: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_question_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'next_analogy_question')
async def next_analogy_question(callback_query: CallbackQuery):
    await start_analogy_test(callback_query)

#________________________________________________________________________________________

@router.callback_query(F.data == 'take_grammar_ru')
async def start_grammar_test(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    last_question_index = await rq.get_last_answered_question_index(telegram_id=telegram_id, subject_id=1)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–¥–∞–Ω–Ω–æ–º
    next_question = await rq.get_next_question(last_answered_question_id=last_question_index, subject_id=1)

    if next_question:
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤
        question_text = (f"*–í–æ–ø—Ä–æ—Å:* {next_question['content']}\n\n"
                         f"_–ê) {next_question['option_a']}_\n"
                         f"_–ë) {next_question['option_b']}_\n"
                         f"_–í) {next_question['option_v']}_\n"
                         f"_–ì) {next_question['option_g']}_\n")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = kb.generate_answer_keyboard_ru_grammar(
            question_id=next_question['question_id'],
            option_a="–ê",
            option_b="–ë",
            option_v="–í",
            option_g="–ì"
        )

        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeGrammarQuestionRU,
            caption=question_text,
            reply_markup=keyboard, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeGrammarQuestionRU,
            caption="–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, "
                    "—á—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã, "
                    "–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ. –û–¥–Ω–∞–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–∏–Ω–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º.",
            reply_markup=kb.take_the_test_again_grammar_ru
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(lambda c: c.data.startswith("ru_grammar_question_"))
async def check_the_correctness(callback_query: CallbackQuery):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(callback_query.message)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'question_123_A'
    callback_data = callback_query.data
    parts = callback_data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É '_'

    if len(parts) >= 3:
        question_id = int(parts[3])  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'question'
        selected_option = parts[4]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (A, B, C, D)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        if selected_option == "A":
            selected_option = "–ê"
        elif selected_option == "B":
            selected_option = "–ë"
        elif selected_option == "V":
            selected_option = "–í"
        elif selected_option == "G":
            selected_option = "–ì"

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ë–î
        question_data = await rq.get_question_and_options(question_id)

        if question_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = await rq.check_answer(question_id, selected_option)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            if is_correct:
                is_update_rubin = await rq.update_rubies(telegram_id=callback_query.from_user.id, rubies_to_add=1)

                if is_update_rubin:
                    user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                    is_update_user_answer = await rq.record_user_answer(
                        user_id=user_id,
                        question_id=question_id,
                        chosen_option=selected_option,
                        is_correct=is_correct,
                        rubies_earned=1)
                    if is_update_user_answer:
                        feedback_text = (f"–í–∞—à –æ—Ç–≤–µ—Ç ({question_data['correct_option']}) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n"
                                         f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ +1 üíé —Ä—É–±–∏–Ω–æ–≤.")
                        photo = utils.PictureForCorrectAnswer
                    else:
                        feedback_text = (
                            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")
                else:
                    feedback_text = (f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä—É–±–∏–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")
            else:
                user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                is_update_user_answer = await rq.record_user_answer(
                    user_id=user_id,
                    question_id=question_id,
                    chosen_option=selected_option,
                    is_correct=is_correct,
                    rubies_earned=0)
                if is_update_user_answer:
                    feedback_text = f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    photo = utils.PictureForWrongAnswer
                else:
                    feedback_text = (
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            question_text = f"–í–æ–ø—Ä–æ—Å: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_grammar_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'next_grammar_question')
async def next_grammar_question(callback_query: CallbackQuery):
    await start_grammar_test(callback_query)



#################################################################################
#                     Passing the test in Kyrgyz                                #
#################################################################################

@router.callback_query(F.data == 'take_test_kg')
async def take_test_kg(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForTakeTheTestKG,
        caption="–ö–∞–π—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—è–¥–∞–Ω —Ç–µ—Å—Ç ”©—Ç”©—Å“Ø–∑?",
        reply_markup=kb.select_subject_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Passing the analogy test in Kyrgyz
@router.callback_query(F.data == 'take_analogy_kg')
async def start_analogy_test_kg(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    last_question_index = await rq.get_last_answered_question_index(telegram_id=telegram_id, subject_id=4)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–¥–∞–Ω–Ω–æ–º
    next_question = await rq.get_next_question(last_answered_question_id=last_question_index, subject_id=4)

    if next_question:
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤
        question_text = f"*–ñ—É–ø:* {next_question['content']}\n"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = kb.generate_answer_keyboard_kg_analogy(
            question_id=next_question['question_id'],
            option_a=next_question['option_a'],
            option_b=next_question['option_b'],
            option_v=next_question['option_v'],
            option_g=next_question['option_g']
        )

        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeAnalogyQuestionKG,
            caption=question_text,
            reply_markup=keyboard, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeAnalogyQuestionKG,
            caption="–°–∏–∑ –±–∞—Ä–¥—ã–∫ —Ç–µ—Å—Ç—Ç–µ—Ä–¥–∏ ”©—Ç—Ç“Ø“£“Ø–∑! –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∫–∞–π—Ç–∞–ª–∞–ø –∫–∏—Ä—Å–µ“£–∏–∑ –±–æ–ª–æ—Ç –∂–µ —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞–π –∞–ª–∞—Å—ã–∑. "
                    "–≠—Å–∫–µ—Ä—Ç“Ø“Ø: —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ ”©—Ç–∫”©–Ω —É—á—É—Ä–¥–∞, –±–∞—Ä–¥—ã–∫ ”©—Ç–∫”©–Ω —Å—É—Ä–æ–æ–ª–æ—Ä –±–æ—é–Ω—á–∞ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä –∂–æ–≥–æ–ª–æ—Ç –∂–∞–Ω–∞ —Å–∏–∑–≥–µ "
                    "—Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞–¥–∞–Ω ”©—Ç“Ø“Ø –∫–µ—Ä–µ–∫ –±–æ–ª–æ—Ç. –ë–∏—Ä–æ–∫ —Ä—É–±–∏–Ω–¥–µ—Ä–¥–∏–Ω —Å–∞–Ω—ã ”©–∑–≥”©—Ä–±”©–π—Ç.",
            reply_markup=kb.take_the_test_again_analogy_kg
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data.startswith("kg_analogy_question_"))
async def check_the_correctness(callback_query: CallbackQuery):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(callback_query.message)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'question_123_A'
    callback_data = callback_query.data
    parts = callback_data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É '_'

    if len(parts) >= 3:
        question_id = int(parts[3])  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'question'
        selected_option = parts[4]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (A, B, C, D)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        if selected_option == "A":
            selected_option = "–ê"
        elif selected_option == "B":
            selected_option = "–ë"
        elif selected_option == "V":
            selected_option = "–í"
        elif selected_option == "G":
            selected_option = "–ì"

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ë–î
        question_data = await rq.get_question_and_options(question_id)

        if question_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = await rq.check_answer(question_id, selected_option)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            if is_correct:
                is_update_rubin = await rq.update_rubies(telegram_id=callback_query.from_user.id, rubies_to_add=1)

                if is_update_rubin:
                    user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                    is_update_user_answer = await rq.record_user_answer(
                        user_id=user_id,
                        question_id=question_id,
                        chosen_option=selected_option,
                        is_correct=is_correct,
                        rubies_earned=1)
                    if is_update_user_answer:
                        feedback_text = (f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø ({question_data['correct_option']}) —Ç—É—É—Ä–∞!\n"
                                         f"–°–∏–∑–≥–µ +1 üíé —Ä—É–±–∏–Ω –∫–æ—à—É–ª–¥—É.")
                        photo = utils.PictureForCorrectAnswer
                    else:
                        feedback_text = (
                            f"–¢–∞—Ä—ã—Ö—á–∞–Ω—ã –∂–∞“£—ã—Ä—Ç—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")
                else:
                    feedback_text = (f"–†—É–±–∏–Ω–¥–µ—Ä–¥–∏ –∫–æ—à—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")
            else:
                user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                is_update_user_answer = await rq.record_user_answer(
                    user_id=user_id,
                    question_id=question_id,
                    chosen_option=selected_option,
                    is_correct=is_correct,
                    rubies_earned=0)
                if is_update_user_answer:
                    feedback_text = f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø —Ç—É—É—Ä–∞ —ç–º–µ—Å! –¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    photo = utils.PictureForWrongAnswer
                else:
                    feedback_text = (
                        f"–¢–∞—Ä—ã—Ö—á–∞–Ω—ã –∂–∞“£—ã—Ä—Ç—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            question_text = f"–ñ—É–ø: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_question_kg_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'next_analogy_kg_question')
async def next_analogy_kg_question(callback_query: CallbackQuery):
    await start_analogy_test_kg(callback_query)


@router.callback_query(F.data == 'take_grammar_kg')
async def start_grammar_test_kg(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    last_question_index = await rq.get_last_answered_question_index(telegram_id=telegram_id, subject_id=2)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–¥–∞–Ω–Ω–æ–º
    next_question = await rq.get_next_question(last_answered_question_id=last_question_index, subject_id=2)

    if next_question:
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤
        question_text = (f"*–°—É—Ä–æ–æ:* {next_question['content']}\n\n"
                         f"_–ê) {next_question['option_a']}_\n"
                         f"_–ë) {next_question['option_b']}_\n"
                         f"_–í) {next_question['option_v']}_\n"
                         f"_–ì) {next_question['option_g']}_\n")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = kb.generate_answer_keyboard_kg_grammar(
            question_id=next_question['question_id'],
            option_a="–ê",
            option_b="–ë",
            option_v="–í",
            option_g="–ì"
        )

        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeGrammarQuestionKG,
            caption=question_text,
            reply_markup=keyboard, # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_message = await callback_query.message.answer_photo(
            photo=utils.PictureForTakeGrammarQuestionKG,
            caption="–°–∏–∑ –±–∞—Ä–¥—ã–∫ —Ç–µ—Å—Ç—Ç–µ—Ä–¥–∏ ”©—Ç—Ç“Ø“£“Ø–∑! –ö–∏–π–∏–Ω—á–µ—Ä—ç—ç–∫ –∫–∞–π—Ç–∞–ª–∞–ø –∫–∏—Ä—Å–µ“£–∏–∑ –±–æ–ª–æ—Ç –∂–µ —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞–π –∞–ª–∞—Å—ã–∑. "
                    "–≠—Å–∫–µ—Ä—Ç“Ø“Ø: —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ ”©—Ç–∫”©–Ω —É—á—É—Ä–¥–∞, –±–∞—Ä–¥—ã–∫ ”©—Ç–∫”©–Ω —Å—É—Ä–æ–æ–ª–æ—Ä –±–æ—é–Ω—á–∞ –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä –∂–æ–≥–æ–ª–æ—Ç –∂–∞–Ω–∞ —Å–∏–∑–≥–µ "
                    "—Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞–¥–∞–Ω ”©—Ç“Ø“Ø –∫–µ—Ä–µ–∫ –±–æ–ª–æ—Ç. –ë–∏—Ä–æ–∫ —Ä—É–±–∏–Ω–¥–µ—Ä–¥–∏–Ω —Å–∞–Ω—ã ”©–∑–≥”©—Ä–±”©–π—Ç.",
            reply_markup=kb.take_the_test_again_grammar_kg
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data.startswith("kg_grammar_question_"))
async def check_the_correctness(callback_query: CallbackQuery):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await delete_previous_messages(callback_query.message)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'question_123_A'
    callback_data = callback_query.data
    parts = callback_data.split('_')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Å–∏–º–≤–æ–ª—É '_'

    if len(parts) >= 3:
        question_id = int(parts[3])  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'question'
        selected_option = parts[4]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (A, B, C, D)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        if selected_option == "A":
            selected_option = "–ê"
        elif selected_option == "B":
            selected_option = "–ë"
        elif selected_option == "V":
            selected_option = "–í"
        elif selected_option == "G":
            selected_option = "–ì"

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ë–î
        question_data = await rq.get_question_and_options(question_id)

        if question_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = await rq.check_answer(question_id, selected_option)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
            if is_correct:
                is_update_rubin = await rq.update_rubies(telegram_id=callback_query.from_user.id, rubies_to_add=1)

                if is_update_rubin:
                    user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                    is_update_user_answer = await rq.record_user_answer(
                        user_id=user_id,
                        question_id=question_id,
                        chosen_option=selected_option,
                        is_correct=is_correct,
                        rubies_earned=1)
                    if is_update_user_answer:
                        feedback_text = (f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø ({question_data['correct_option']}) —Ç—É—É—Ä–∞!\n"
                                         f"–°–∏–∑–≥–µ +1 üíé —Ä—É–±–∏–Ω –∫–æ—à—É–ª–¥—É.")
                        photo = utils.PictureForCorrectAnswer
                    else:
                        feedback_text = (
                            f"–¢–∞—Ä—ã—Ö—á–∞–Ω—ã –∂–∞“£—ã—Ä—Ç—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")
                else:
                    feedback_text = (f"–†—É–±–∏–Ω–¥–µ—Ä–¥–∏ –∫–æ—à—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")
            else:
                user_id = await rq.get_user_id_by_telegram_id(callback_query.from_user.id)
                is_update_user_answer = await rq.record_user_answer(
                    user_id=user_id,
                    question_id=question_id,
                    chosen_option=selected_option,
                    is_correct=is_correct,
                    rubies_earned=0)
                if is_update_user_answer:
                    feedback_text = f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø —Ç—É—É—Ä–∞ —ç–º–µ—Å! –¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    photo = utils.PictureForWrongAnswer
                else:
                    feedback_text = (
                        f"–¢–∞—Ä—ã—Ö—á–∞–Ω—ã –∂–∞“£—ã—Ä—Ç—É—É–¥–∞ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –°—É—Ä–∞–Ω—ã—á, —Ç–µ—Å—Ç—Ç–µ–Ω —á—ã–≥—ã–ø, –∞–≥–∞ –∫–∞–π—Ä–∞–¥–∞–Ω –∫–∏—Ä–∏“£–∏–∑.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            question_text = f"–°—É—Ä–æ–æ: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_grammar_kg_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'next_grammar_question_kg')
async def next_grammar_question_kg(callback_query: CallbackQuery):
    await start_grammar_test_kg(callback_query)

# Take the russian analogy test again
@router.callback_query(F.data == 'take_the_test_again_analogy_ru')
async def take_the_test_analogy_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer(
        text="–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, "
             "–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12:34.",
        reply_markup=kb.to_user_account_ru
    )

    await state.set_state(st.TakeTheRussianAnalogyTestAgain.enter_time)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.TakeTheRussianAnalogyTestAgain.enter_time)
async def take_the_test_analogy_ru_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_input = message.text

    current_time = datetime.now()
    current_hour = current_time.strftime('%H')
    current_minute = current_time.strftime('%M')
    expected_time = f"{current_hour}:{current_minute}"
    user_telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if user_input == expected_time:
        is_deleted_data = await rq.delete_completed_questions(subject_id=3, telegram_id=user_telegram_id)
        if is_deleted_data:
            sent_message = await message.answer(
                text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –°–±—Ä–æ—Å —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=kb.to_user_account_ru
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()


# Take the russian grammar test again
@router.callback_query(F.data == 'take_the_test_again_grammar_ru')
async def take_the_test_grammar_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer(
        text="–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, "
             "–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 12:34.",
        reply_markup=kb.to_user_account_ru
    )

    await state.set_state(st.TakeTheRussianGrammarTestAgain.enter_time)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.TakeTheRussianGrammarTestAgain.enter_time)
async def take_the_test_grammar_ru_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_input = message.text

    current_time = datetime.now()
    current_hour = current_time.strftime('%H')
    current_minute = current_time.strftime('%M')
    expected_time = f"{current_hour}:{current_minute}"
    user_telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if user_input == expected_time:
        is_deleted_data = await rq.delete_completed_questions(subject_id=1, telegram_id=user_telegram_id)
        if is_deleted_data:
            sent_message = await message.answer(
                text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=kb.to_user_account_ru
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –°–±—Ä–æ—Å —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=kb.to_user_account_ru
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()

# Take the kyrgyz analogy test again
@router.callback_query(F.data == 'take_the_test_again_analogy_kg')
async def take_the_test_analogy_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer(
        text="–≠–≥–µ—Ä–¥–µ —Å–∏–∑ —á—ã–Ω —ç–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å—Ç–∏ ”©—á“Ø—Ä“Ø–ø, —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞–≥—ã“£—ã–∑ –∫–µ–ª—Å–µ, "
             "–∞–Ω–¥–∞ —É—á—É—Ä–¥–∞–≥—ã —É–±–∞–∫—ã—Ç—Ç—ã —Å–∞–∞—Ç:–º“Ø–Ω”©—Ç —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞–∑—ã“£—ã–∑, –º–∏—Å–∞–ª—ã, 12:34.",
        reply_markup=kb.to_user_account_kg
    )

    await state.set_state(st.TakeTheKyrgyzAnalogyTestAgain.enter_time)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.TakeTheKyrgyzAnalogyTestAgain.enter_time)
async def take_the_test_analogy_kg_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_input = message.text

    current_time = datetime.now()
    current_hour = current_time.strftime('%H')
    current_minute = current_time.strftime('%M')
    expected_time = f"{current_hour}:{current_minute}"
    user_telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if user_input == expected_time:
        is_deleted_data = await rq.delete_completed_questions(subject_id=4, telegram_id=user_telegram_id)
        if is_deleted_data:
            sent_message = await message.answer(
                text="–°–∏–∑–¥–∏–Ω ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç—ã“£—ã–∑ ”©—á“Ø—Ä“Ø–ª–¥“Ø. –°–∏–∑ —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞—Å–∞“£—ã–∑ –±–æ–ª–æ—Ç.",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–°–∏–∑–¥–∏–Ω ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã ”©—á“Ø—Ä“Ø“Ø–¥”© –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –ö–∞–π—Ä–∞–¥–∞–Ω –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã–ø –∫”©—Ä“Ø“£“Ø–∑.",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–£–±–∞–∫—ã—Ç—Ç—ã —Ç—É—É—Ä–∞ —ç–º–µ—Å –∂–∞–∑–¥—ã“£—ã–∑, ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç ”©—á“Ø—Ä“Ø–ª–≥”©–Ω –∂–æ–∫.",
            reply_markup=kb.to_user_account_kg
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()


# Take the kyrgyz grammar test again
@router.callback_query(F.data == 'take_the_test_again_grammar_kg')
async def take_the_test_grammar_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer(
        text="–≠–≥–µ—Ä–¥–µ —Å–∏–∑ —á—ã–Ω —ç–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å—Ç–∏ ”©—á“Ø—Ä“Ø–ø, —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞–≥—ã“£—ã–∑ –∫–µ–ª—Å–µ, "
             "–∞–Ω–¥–∞ —É—á—É—Ä–¥–∞–≥—ã —É–±–∞–∫—ã—Ç—Ç—ã —Å–∞–∞—Ç:–º“Ø–Ω”©—Ç —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞–∑—ã“£—ã–∑, –º–∏—Å–∞–ª—ã, 12:34.",
        reply_markup=kb.to_user_account_kg
    )

    await state.set_state(st.TakeTheKyrgyzGrammarTestAgain.enter_time)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.message(st.TakeTheKyrgyzGrammarTestAgain.enter_time)
async def take_the_test_grammar_kg_finish(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    user_input = message.text

    current_time = datetime.now()
    current_hour = current_time.strftime('%H')
    current_minute = current_time.strftime('%M')
    expected_time = f"{current_hour}:{current_minute}"
    user_telegram_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if user_input == expected_time:
        is_deleted_data = await rq.delete_completed_questions(subject_id=2, telegram_id=user_telegram_id)
        if is_deleted_data:
            sent_message = await message.answer(
                text="–°–∏–∑–¥–∏–Ω ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç—ã“£—ã–∑ ”©—á“Ø—Ä“Ø–ª–¥“Ø. –°–∏–∑ —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞ –±–∞—à—Ç–∞—Å–∞“£—ã–∑ –±–æ–ª–æ—Ç.",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        else:
            sent_message = await message.answer(
                text="–°–∏–∑–¥–∏–Ω ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç—Ç—ã ”©—á“Ø—Ä“Ø“Ø–¥”© –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏. –ö–∞–π—Ä–∞–¥–∞–Ω –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã–ø –∫”©—Ä“Ø“£“Ø–∑.",
                reply_markup=kb.to_user_account_kg
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await message.answer(
            text="–£–±–∞–∫—ã—Ç—Ç—ã —Ç—É—É—Ä–∞ —ç–º–µ—Å –∂–∞–∑–¥—ã“£—ã–∑, ”©—Ç–∫”©–Ω —Ç–µ—Å—Ç—Ç–µ—Ä —Ç—É—É—Ä–∞–ª—É—É –º–∞–∞–ª—ã–º–∞—Ç ”©—á“Ø—Ä“Ø–ª–≥”©–Ω –∂–æ–∫.",
            reply_markup=kb.to_user_account_kg
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("analysis_of_the_issue_"))
async def analysis_of_the_issue(callback_query: CallbackQuery):
    # take_the_test_again_analogy_kg_3
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)

    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[6])
    question_type = parts[5]
    question_language = parts[4]
    explanation_text_for_user = ""

    is_explanation = await rq.check_explanation_exists(question_id=question_id)

    if not is_explanation:
        if question_language == "kg":
            question_data = await rq.get_question_and_options(question_id)
            if question_type == "analogy":
                if question_data:
                    question_text = f"–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n"\
                                    f"–¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    prompt_for_gpt = (f"{utils.PromptForChatGPTForKyrgyzAnalogyQuestion}\n\n"
                                      f"{question_text}\n\n"
                                      f"{utils.PromptForChatGPTForKyrgyzAnalogyQuestionEnd}")

                    response = await gpt.get_chatgpt_response(prompt_for_gpt)
                    explanation_text_for_user += "\n\n" + response
                    await rq.update_explanation_by_question_id(question_id=question_id, explanation_text=response)
            elif question_type == "grammar":
                if question_data:
                    question_text = f"–°—É—Ä–æ–æ: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    prompt_for_gpt = (f"{utils.PromptForChatGPTForKyrgyzGrammarQuestion}\n\n"
                                      f"{question_text}\n\n"
                                      f"{utils.PromptForChatGPTForKyrgyzGrammarQuestionEnd}")

                    response = await gpt.get_chatgpt_response(prompt_for_gpt)
                    explanation_text_for_user += "\n\n" + response
                    await rq.update_explanation_by_question_id(question_id=question_id, explanation_text=response)
        elif question_language == "ru":
            question_data = await rq.get_question_and_options(question_id)
            if question_type == "analogy":
                if question_data:
                    question_text = f"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n"\
                                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    prompt_for_gpt = (f"{utils.PromptForChatGPTForRussianAnalogyQuestion}\n\n"
                                      f"{question_text}\n\n"
                                      f"{utils.PromptForChatGPTForRussianAnalogyQuestionEnd}")

                    response = await gpt.get_chatgpt_response(prompt_for_gpt)
                    explanation_text_for_user += "\n\n" + response
                    await rq.update_explanation_by_question_id(question_id=question_id, explanation_text=response)
            elif question_type == "grammar":
                if question_data:
                    question_text = f"–í–æ–ø—Ä–æ—Å: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    prompt_for_gpt = (f"{utils.PromptForChatGPTForRussianGrammarQuestion}\n\n"
                                      f"{question_text}\n\n"
                                      f"{utils.PromptForChatGPTForRussianGrammarQuestionEnd}")

                    response = await gpt.get_chatgpt_response(prompt_for_gpt)
                    explanation_text_for_user += "\n\n" + response
                    await rq.update_explanation_by_question_id(question_id=question_id, explanation_text=response)
        await delete_previous_messages(callback_query.message)
        sent_message = await callback_query.message.answer(
            text=explanation_text_for_user,
            reply_markup=kb.go_to_question_result(question_id=question_id, question_type=question_type,
                                                  question_lenguage=question_language)
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        explanation = await rq.get_explanation_by_question_id(question_id=question_id)
        if question_language == "kg":
            question_data = await rq.get_question_and_options(question_id)
            if question_type == "analogy":
                if question_data:
                    question_text = f"–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    explanation_text_for_user += "\n\n" + explanation
            elif question_type == "grammar":
                if question_data:
                    question_text = f"–°—É—Ä–æ–æ: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    explanation_text_for_user += "\n\n" + explanation

        elif question_language == "ru":
            question_data = await rq.get_question_and_options(question_id)
            if question_type == "analogy":
                if question_data:
                    question_text = f"–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    explanation_text_for_user += "\n\n" + explanation
            elif question_type == "grammar":
                if question_data:
                    question_text = f"–í–æ–ø—Ä–æ—Å: {question_data['question']}\n" \
                                    f"–ê) {question_data['option_a']}\n" \
                                    f"–ë) {question_data['option_b']}\n" \
                                    f"–í) {question_data['option_v']}\n" \
                                    f"–ì) {question_data['option_g']}\n\n" \
                                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                    explanation_text_for_user += question_text
                    explanation_text_for_user += "\n\n" + explanation
        await delete_previous_messages(callback_query.message)
        sent_message = await callback_query.message.answer(
            text=explanation_text_for_user,
            reply_markup=kb.go_to_question_result(question_id=question_id, question_type=question_type,
                                                  question_lenguage=question_language)
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data.startswith("go_to_question_result_"))
async def go_to_question_result(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    telegram_id = callback_query.from_user.id
    # go_to_question_result_analogy_kg_12
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[6])
    question_type = parts[4]
    question_language = parts[5]

    question_data = await rq.get_question_and_options(question_id)
    is_correct = await rq.check_user_answer_correct(question_id=question_id, user_telegram_id=telegram_id)

    if question_language == 'kg':
        if question_type == 'analogy':
            question_text = f"–ñ—É–ø: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"
            if is_correct:
                feedback_text = (f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø ({question_data['correct_option']}) —Ç—É—É—Ä–∞!\n"
                                 f"–°–∏–∑–≥–µ +1 üíé —Ä—É–±–∏–Ω –∫–æ—à—É–ª–¥—É.")
                photo = utils.PictureForCorrectAnswer
            else:
                feedback_text = f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø —Ç—É—É—Ä–∞ —ç–º–µ—Å! –¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                photo = utils.PictureForWrongAnswer
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_question_kg_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        elif question_type == 'grammar':
            question_text = f"–°—É—Ä–æ–æ: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"
            if is_correct:
                feedback_text = (f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø ({question_data['correct_option']}) —Ç—É—É—Ä–∞!\n"
                                 f"–°–∏–∑–≥–µ +1 üíé —Ä—É–±–∏–Ω –∫–æ—à—É–ª–¥—É.")
                photo = utils.PictureForCorrectAnswer
            else:
                feedback_text = f"–°–∏–∑–¥–∏–Ω –∂–æ–æ–ø —Ç—É—É—Ä–∞ —ç–º–µ—Å! –¢—É—É—Ä–∞ –∂–æ–æ–ø: {question_data['correct_option']}"
                photo = utils.PictureForWrongAnswer
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_grammar_kg_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    elif question_language == 'ru':
        if question_type == 'analogy':
            question_text = f"–ü–∞—Ä–∞: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"
            if is_correct:
                feedback_text = (f"–í–∞—à –æ—Ç–≤–µ—Ç ({question_data['correct_option']}) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n"
                                 f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ +1 üíé —Ä—É–±–∏–Ω–æ–≤.")
                photo = utils.PictureForCorrectAnswer
            else:
                feedback_text = f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                photo = utils.PictureForWrongAnswer
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_question_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
        elif question_type == 'grammar':
            question_text = f"–í–æ–ø—Ä–æ—Å: {question_data['question']}\n" \
                            f"–ê) {question_data['option_a']}\n" \
                            f"–ë) {question_data['option_b']}\n" \
                            f"–í) {question_data['option_v']}\n" \
                            f"–ì) {question_data['option_g']}\n"
            if is_correct:
                feedback_text = (f"–í–∞—à –æ—Ç–≤–µ—Ç ({question_data['correct_option']}) –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n"
                                 f"–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ +1 üíé —Ä—É–±–∏–Ω–æ–≤.")
                photo = utils.PictureForCorrectAnswer
            else:
                feedback_text = f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['correct_option']}"
                photo = utils.PictureForWrongAnswer
            sent_message = await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{question_text}\n_{feedback_text}_",
                reply_markup=kb.next_analogy_grammar_button(question_id=question_id),
                parse_mode=ParseMode.MARKDOWN
            )
            sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(F.data == 'duel_kg')
async def duel_kg(callback_query: CallbackQuery):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.PictureForDuel,
        caption="–î—É—ç–ª—å - –±—É–ª 5 —Å—É—Ä–æ–æ –º–µ–Ω–µ–Ω –∞—Ç–∞–∞–Ω–¥–∞—à –º–µ–Ω–µ–Ω —Ç–∞–π–º–∞—à—É—É",
        reply_markup=kb.duel_menu_kg
    )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(F.data == 'duel_with_random_kg')
async def duel_with_random_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    is_duel = await rq.has_unfinished_duels()

    if not is_duel:
        question_ids = await rq.get_random_questions_by_subjects(subject_id1=2, subject_id2=4)
        print(question_ids)
        await duel_first_question_kg(callback_query, question_ids, state)
    else:
        ...

async def duel_first_question_kg(callback_query, question_ids: list[int], state: FSMContext):
    question_id = question_ids[0]
    print(question_id)

    question_data = await rq.get_question_and_options(question_id=question_id)
    await state.update_data(question_ids=question_ids, score=0)

    question_text = f"–°—É—Ä–æ–æ 1: *{question_data['question']}*\n" \
                    f"–ê) {question_data['option_a']}\n" \
                    f"–ë) {question_data['option_b']}\n" \
                    f"–í) {question_data['option_v']}\n" \
                    f"–ì) {question_data['option_g']}\n"

    sent_message = await callback_query.message.answer(
        text=question_text,
        reply_markup=kb.duel_question_keyboard_kg(question_id=question_id, numerator=1)
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data and c.data.startswith("duel_question_kg_1_"))
async def duel_second_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    # duel_question_kg_1_12_a
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[4])
    selected_option = parts[5]
    print(selected_option)

    if selected_option == "a":
        selected_option = "–ê"
    elif selected_option == "b":
        selected_option = "–ë"
    elif selected_option == "v":
        selected_option = "–í"
    elif selected_option == "g":
        selected_option = "–ì"
    print(str(question_id) + " " + selected_option)


    is_correct = await rq.check_answer(question_id, selected_option)

    data = await state.get_data()

    if is_correct:
        print("+1")
        score = data['score']
        score = score + 1
        await state.update_data(score=score)

    next_question_ids = data['question_ids']
    next_question_id = next_question_ids[1]
    print(next_question_id)


    question_data = await rq.get_question_and_options(question_id=next_question_id)

    question_text = f"–°—É—Ä–æ–æ 2: *{question_data['question']}*\n" \
                    f"–ê) {question_data['option_a']}\n" \
                    f"–ë) {question_data['option_b']}\n" \
                    f"–í) {question_data['option_v']}\n" \
                    f"–ì) {question_data['option_g']}\n"

    sent_message = await callback_query.message.answer(
        text=question_text,
        reply_markup=kb.duel_question_keyboard_kg(question_id=next_question_id, numerator=2)
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data and c.data.startswith("duel_question_kg_2_"))
async def duel_third_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    # duel_question_kg_1_12_a
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[4])
    selected_option = parts[5]
    print(selected_option)


    if selected_option == "a":
        selected_option = "–ê"
    elif selected_option == "b":
        selected_option = "–ë"
    elif selected_option == "v":
        selected_option = "–í"
    elif selected_option == "g":
        selected_option = "–ì"
    print(str(question_id) + " " + selected_option)

    is_correct = await rq.check_answer(question_id, selected_option)

    data = await state.get_data()

    if is_correct:
        print("+1")
        score = data['score']
        score = score + 1
        await state.update_data(score=score)

    next_question_ids = data['question_ids']
    next_question_id = next_question_ids[2]
    print(next_question_id)


    question_data = await rq.get_question_and_options(question_id=next_question_id)

    question_text = f"–°—É—Ä–æ–æ 3: *{question_data['question']}*\n" \
                    f"–ê) {question_data['option_a']}\n" \
                    f"–ë) {question_data['option_b']}\n" \
                    f"–í) {question_data['option_v']}\n" \
                    f"–ì) {question_data['option_g']}\n"

    sent_message = await callback_query.message.answer(
        text=question_text,
        reply_markup=kb.duel_question_keyboard_kg(question_id=next_question_id, numerator=3)
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

@router.callback_query(lambda c: c.data and c.data.startswith("duel_question_kg_3_"))
async def duel_fourth_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    # duel_question_kg_1_12_a
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[4])
    selected_option = parts[5]
    print(selected_option)


    if selected_option == "a":
        selected_option = "–ê"
    elif selected_option == "b":
        selected_option = "–ë"
    elif selected_option == "v":
        selected_option = "–í"
    elif selected_option == "g":
        selected_option = "–ì"

    print(str(question_id) + " " + selected_option)


    is_correct = await rq.check_answer(question_id, selected_option)

    data = await state.get_data()

    if is_correct:
        print("+1")
        score = data['score']
        score = score + 1
        await state.update_data(score=score)

    next_question_ids = data['question_ids']
    next_question_id = next_question_ids[3]
    print(next_question_id)


    question_data = await rq.get_question_and_options(question_id=next_question_id)

    question_text = f"–°—É—Ä–æ–æ 4: *{question_data['question']}*\n" \
                    f"–ê) {question_data['option_a']}\n" \
                    f"–ë) {question_data['option_b']}\n" \
                    f"–í) {question_data['option_v']}\n" \
                    f"–ì) {question_data['option_g']}\n"

    sent_message = await callback_query.message.answer(
        text=question_text,
        reply_markup=kb.duel_question_keyboard_kg(question_id=next_question_id, numerator=4)
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


@router.callback_query(lambda c: c.data and c.data.startswith("duel_question_kg_4_"))
async def duel_fifth_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    # duel_question_kg_1_12_a
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[4])
    selected_option = parts[5]
    print(selected_option)


    if selected_option == "a":
        selected_option = "–ê"
    elif selected_option == "b":
        selected_option = "–ë"
    elif selected_option == "v":
        selected_option = "–í"
    elif selected_option == "g":
        selected_option = "–ì"
    print(str(question_id) + " " + selected_option)


    is_correct = await rq.check_answer(question_id, selected_option)

    data = await state.get_data()

    if is_correct:
        print("+1")
        score = data['score']
        score = score + 1
        await state.update_data(score=score)

    next_question_ids = data['question_ids']
    next_question_id = next_question_ids[4]
    print(next_question_id)


    question_data = await rq.get_question_and_options(question_id=next_question_id)

    question_text = f"–°—É—Ä–æ–æ 5: *{question_data['question']}*\n" \
                    f"–ê) {question_data['option_a']}\n" \
                    f"–ë) {question_data['option_b']}\n" \
                    f"–í) {question_data['option_v']}\n" \
                    f"–ì) {question_data['option_g']}\n"

    sent_message = await callback_query.message.answer(
        text=question_text,
        reply_markup=kb.duel_question_keyboard_kg(question_id=next_question_id, numerator=5)
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



@router.callback_query(lambda c: c.data and c.data.startswith("duel_question_kg_5_"))
async def duel_fifth_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    # duel_question_kg_1_12_a
    callback_data = callback_query.data
    parts = callback_data.split('_')
    question_id = int(parts[4])
    selected_option = parts[5]
    print(selected_option)


    if selected_option == "a":
        selected_option = "–ê"
    elif selected_option == "b":
        selected_option = "–ë"
    elif selected_option == "v":
        selected_option = "–í"
    elif selected_option == "g":
        selected_option = "–ì"
    print(str(question_id) + " " + selected_option)


    is_correct = await rq.check_answer(question_id, selected_option)

    data = await state.get_data()

    if is_correct:
        print("+1")
        score = data['score']
        score = score + 1
        await state.update_data(score=score)

    data = await state.get_data()
    score = data['score']

    sent_message = await callback_query.message.answer(
        text=f"–í–∞—à –±–∞–ª–ª: {score}",
        reply_markup=kb.to_user_account_kg
    )
    await state.clear()
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)