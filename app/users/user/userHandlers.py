import json

from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from app.database import requests as rq
from aiogram.fsm.context import FSMContext
from app.users.user.scripts import is_valid_analogy, is_kyrgyz_words, is_kyrgyz_sentence, is_russian_words, \
    is_russian_sentence
from app.utils import sent_message_add_screen_ids, router
from app.users.user import userStates as st
import app.users.user.userKeyboards as kb
from app import utils
from aiogram.enums import ParseMode



# Function to delete previous messages
async def delete_previous_messages(message: Message):
    # Delete all user messages except "/start"
    for msg_id in sent_message_add_screen_ids['user_messages']:
        try:
            if msg_id != message.message_id or message.text != "/start":
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['user_messages'].clear()

    # Delete all bot messages
    for msg_id in sent_message_add_screen_ids['bot_messages']:
        try:
            if msg_id != message.message_id:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    sent_message_add_screen_ids['bot_messages'].clear()

# User's personal account
async def user_account(message: Message, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)

    user_tg_id = str(message.chat.id)
    language = await rq.get_user_language(user_tg_id)
    name = await rq.get_user_name(user_tg_id)

    await delete_previous_messages(message)



    if language == 'ru':
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–ü—Ä–∏–≤–µ—Ç, {name}'
                    f'\n<a href="https://telegra.ph/lpshchzk-10-30">–ö–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç?</a> üëà',
        reply_markup=kb.profile_button_ru,
        parse_mode=ParseMode.HTML)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureOfUsersPersonalAccountRU,
            caption=f'–°–∞–ª–∞–º, {name}'
                    f'\n<a href="https://telegra.ph/Bizdin-ORTga-dayardanuu-%D2%AFch%D2%AFn-Telegram-bot-kandaj-ishtejt-10-30">–ë–æ—Ç –∫–∞–Ω–¥–∞–π –∏—à—Ç–µ–π—Ç?</a> üëà',
            reply_markup=kb.profile_button_kg,
            parse_mode=ParseMode.HTML)

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "/photo"
@router.message(Command("photo"))
async def request_photo_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.photo)
async def photo_handler(message: Message):
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ ID
    photo_id = message.photo[-1].file_id
    await message.answer(f"ID –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: {photo_id}")

# Back to personal account
@router.callback_query(F.data.in_(['to_home_ru', 'to_home_kg']))
async def go_home_handler(callback_query: CallbackQuery, state: FSMContext):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    sent_message_add_screen_ids['bot_messages'].append(callback_query.message.message_id)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    await user_account(callback_query.message, state)


# Handler for creating a question in ru
@router.callback_query(F.data == 'create_test_ru')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(photo=utils.pictureForTheTestCreationScreenKG,
                                                             caption='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.',
                                                             reply_markup=kb.subjects_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


##############################################################
#               Creating a analogy test in kg                #
##############################################################

# Handler for creating a question in kg
@router.callback_query(F.data == 'creat_test_kg')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenKG,
        caption='–ö–∞–π—Å—ã –±”©–ª“Ø–∫—Ç”©–Ω —Å—É—Ä–æ–æ —Ç—É–∑“Ø“Ø–Ω“Ø –∫–∞–∞–ª–∞–π—Å—ã–∑?',
        reply_markup=kb.subjects_kg
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Initial handler for entering question text
@router.callback_query(F.data == 'analogy_kg')
async def write_analogy_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnAnalogyKG,
        caption='–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∂–∞–∑—ã“£—ã–∑.\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering analogy question text
@router.message(st.CreatAnalogyQuestionsKG.create_question_kg)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_valid_analogy(question_text):
        if await is_kyrgyz_words(question_text):
            await state.update_data(question_text=question_text, options={})

            sent_message = await message.answer(
                f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n\n"
                f"*A) ............................*\n"
                f"–ë) ............................\n"
                f"–í) ............................\n"
                f"–ì) ............................\n\n"
                "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω 'A' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsKG.create_option_a_kg)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyKG,
                caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω –Ω–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç–∞ –∫–∞—Ç–∞ –±–∞—Ä, –∂–µ –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ —ç–º–µ—Å. –°—É—Ä–∞–Ω—ã—á, —Ç—É—É—Ä–∞ –∂–∞–Ω–∞ –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ –≥–∞–Ω–∞ –∂–∞–∑—ã“£—ã–∑\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyKG,
            caption='–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø—Ç—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω —Ç—É—É—Ä–∞ —ç–º–µ—Å –∂–∞–∑–¥—ã“£—ã–∑. –§–æ—Ä–º–∞—Ç—Ç–∞–≥—ã–¥–∞–π –∂–∞–∑—ã“£—ã–∑\n“Æ–ª–≥“Ø: _–ê–ª–º–∞ : –ñ–µ–º–∏—à_',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatAnalogyQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# General handler for options A, B, V, and G
async def get_option_analogy_kg(message: Message, state: FSMContext, option_key: str, next_state):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    option_texts = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω —Ç—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω —Ç–∞–Ω–¥—ã“£—ã–∑"
    }
    if await is_valid_analogy(message.text):
        if await is_kyrgyz_words(message.text):
            data = await state.get_data()
            options = data.get('options', {})
            options[option_key] = message.text
            await state.update_data(options=options)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç "G", —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if option_key == 'G':
                sent_message = await message.answer(
                    f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"{option_texts[option_key]}",
                    reply_markup=kb.option_buttons_for_creating_an_analogy_kg,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ A, B, V, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                sent_message = await message.answer(
                    f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω '{option_texts[option_key]}' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                    parse_mode=ParseMode.MARKDOWN
                )
                await state.set_state(next_state)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyKG,
                caption=f'–°–∏–∑ –∂–∞–∑–≥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –∫—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ —ç–º–µ—Å. –ö—ã—Ä–≥—ã–∑ —Ç–∏–ª–∏–Ω–¥–µ–≥–∏ —Å”©–∑–¥”©—Ä–¥“Ø –∫–æ–ª–¥–æ–Ω—É–ø, –±—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑.',
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyKG,
            caption=f'–°–∏–∑ –∂–∞–∑–≥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Ç—É—É—Ä–∞ —ç–º–µ—Å —Ñ–æ—Ä–º–∞—Ç—Ç–∞. –ö”©—Ä—Å”©—Ç“Ø–ª–≥”©–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞–≥—ã–¥–∞–π –∫—ã–ª—ã–ø –±—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑. “Æ–ª–≥“Ø –±–æ—é–Ω—á–∞ –∂–∞–∑—ã“£—ã–∑: _–¢–∞–ª–∞—Å : –®–∞–∞—Ä_',
            parse_mode=ParseMode.MARKDOWN
        )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatAnalogyQuestionsKG.create_option_a_kg)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'A', st.CreatAnalogyQuestionsKG.create_option_b_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_b_kg)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'B', st.CreatAnalogyQuestionsKG.create_option_v_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_v_kg)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'V', st.CreatAnalogyQuestionsKG.create_option_g_kg)


@router.message(st.CreatAnalogyQuestionsKG.create_option_g_kg)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_analogy_kg(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['kg_creating_an_analogy_a', 'kg_creating_an_analogy_b', 'kg_creating_an_analogy_v', 'kg_creating_an_analogy_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–ù–µ–≥–∏–∑–≥–∏ –∂—É–ø:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–¢—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑, —ç–º–∏ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø“£“Ø–∑.",
        reply_markup=kb.option_buttons_for_creating_an_analogy_kg_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)




##############################################################
#              Creating a analogy test in ru                 #
##############################################################

# Handler for creating a question in ru
@router.callback_query(F.data == 'creat_test_ru')
async def create_question(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)
    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheTestCreationScreenRU,
        caption='–ò–∑ –∫–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?',
        reply_markup=kb.subjects_ru
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Initial handler for entering question text
@router.callback_query(F.data == 'analogy_ru')
async def write_analogy_question_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnAnalogyRU,
        caption='–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É.\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering analogy question text
@router.message(st.CreatAnalogyQuestionsRU.create_question_ru)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_valid_analogy(question_text):
        if await is_russian_words(question_text):
            await state.update_data(question_text=question_text, options={})

            sent_message = await message.answer(
                f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {question_text}\n\n"
                f"*A) ............................*\n"
                f"–ë) ............................\n"
                f"–í) ............................\n"
                f"–ì) ............................\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 'A':",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsRU.create_option_a_ru)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyRU,
                caption='–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyRU,
            caption='–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞—Ä—É –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É\n–ü—Ä–∏–º–µ—Ä: _–Ø–±–ª–æ–∫–æ : –§—Ä—É–∫—Ç_',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatAnalogyQuestionsRU.create_question_ru)

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# General handler for options A, B, V, and G in Russian
async def get_option_analogy_ru(message: Message, state: FSMContext, option_key: str, next_state):
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)
    data = await state.get_data()
    options = data.get('options', {})

    if await is_valid_analogy(message.text):
        if await is_russian_words(message.text):
            options[option_key] = message.text
            await state.update_data(options=options)

            option_text = {
                'A': '–ë',
                'B': '–í',
                'V': '–ì',
                'G': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            }

            if option_key == 'G':
                sent_message = await message.answer(
                    f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"{option_text[option_key]}",
                    reply_markup=kb.option_buttons_for_creating_an_analogy_ru,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                sent_message = await message.answer(
                    f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {data['question_text']}\n\n"
                    f"A) {options.get('A', '............................')}\n"
                    f"–ë) {options.get('B', '............................')}\n"
                    f"–í) {options.get('V', '............................')}\n"
                    f"–ì) {options.get('G', '............................')}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ '{option_text[option_key]}':",
                    parse_mode=ParseMode.MARKDOWN
                )
                await state.set_state(next_state)
        else:
            sent_message = await message.answer_photo(
                photo=utils.pictureForTheEditAnAnalogyRU,
                caption=f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.',
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnAnalogyRU,
            caption=f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É. –ü—Ä–∏–º–µ—Ä: _–ì–æ—Ä–æ–¥ : –°—Ç—Ä–∞–Ω–∞_',
            parse_mode=ParseMode.MARKDOWN
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G in Russian
@router.message(st.CreatAnalogyQuestionsRU.create_option_a_ru)
async def get_option_a_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'A', st.CreatAnalogyQuestionsRU.create_option_b_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_b_ru)
async def get_option_b_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'B', st.CreatAnalogyQuestionsRU.create_option_v_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_v_ru)
async def get_option_v_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'V', st.CreatAnalogyQuestionsRU.create_option_g_ru)


@router.message(st.CreatAnalogyQuestionsRU.create_option_g_ru)
async def get_option_g_ru(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_analogy_ru(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer in Russian
@router.callback_query(F.data.in_(
    ['ru_creating_an_analogy_a', 'ru_creating_an_analogy_b', 'ru_creating_an_analogy_v', 'ru_creating_an_analogy_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞—Ä–∞:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=kb.option_buttons_for_creating_an_analogy_ru_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


##############################################################
#               Creating a grammar test in kg                #
##############################################################

# Initial handler for entering question text
@router.callback_query(F.data == 'grammar_kg')
async def write_grammar_question_kg(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnGrammerKG,
        caption='–ì—Ä–∞–º–º–∞—Ç—ã–∫–∞–ª—ã–∫ —Å—É—Ä–æ–æ–Ω—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∂–∞–∑—ã“£—ã–∑',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatGrammarQuestionsKG.create_question_kg)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering grammar question text
@router.message(st.CreatGrammarQuestionsKG.create_question_kg)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if message.text == "/start":
        await user_account(message, state)
        return

    if await is_kyrgyz_sentence(question_text) == "–¢—É—É—Ä–∞":
        await state.update_data(question_text=question_text, options={})

        sent_message = await message.answer(
            f"*–°—É—Ä–æ–æ:* {question_text}\n\n"
            f"*A) ............................*\n"
            f"–ë) ............................\n"
            f"–í) ............................\n"
            f"–ì) ............................\n\n"
            "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω 'A' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsKG.create_option_a_kg)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        err_sentences = await is_kyrgyz_sentence(question_text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerKG,
            caption=f'_{err_sentences}._\n–¢—É—É—Ä–∞–ª–∞–ø, —Å—É—Ä–æ–æ–Ω—É–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑:',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsKG.create_question_kg)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# General handler for options A, B, V, and G
async def get_option_grammar_kg(message: Message, state: FSMContext, option_key: str, next_state):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    option_text = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω —Ç—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω —Ç–∞–Ω–¥—ã“£—ã–∑"
    }

    if await is_kyrgyz_sentence(message.text) == "–¢—É—É—Ä–∞":
        data = await state.get_data()
        options = data.get('options', {})
        options[option_key] = message.text
        await state.update_data(options=options)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç "G", —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if option_key == 'G':
            sent_message = await message.answer(
                f"*–°—É—Ä–æ–æ:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"{option_text[option_key]}",
                reply_markup=kb.option_buttons_for_creating_a_grammar_kg,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ A, B, V, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            sent_message = await message.answer(
                f"*–°—É—Ä–æ–æ:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"–°—É—Ä–æ–æ–Ω—É–Ω –∂–æ–æ–±—É–Ω—É–Ω '{option_text[option_key]}' –≤–∞—Ä–∏–∞–Ω—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(next_state)
    else:
        err_sentences = await is_kyrgyz_sentence(message.text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerKG,
            caption=f'_{err_sentences}._\n–¢—É—É—Ä–∞–ª–∞–ø, –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã–Ω –±–µ—Ä–∏–ª–∏—à–∏–Ω –∫–∞–π—Ä–∞ –∂–∞–∑—ã“£—ã–∑:',
            parse_mode=ParseMode.MARKDOWN
        )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatGrammarQuestionsKG.create_option_a_kg)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'A', st.CreatGrammarQuestionsKG.create_option_b_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_b_kg)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'B', st.CreatGrammarQuestionsKG.create_option_v_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_v_kg)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'V', st.CreatGrammarQuestionsKG.create_option_g_kg)


@router.message(st.CreatGrammarQuestionsKG.create_option_g_kg)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await get_option_grammar_kg(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['kg_creating_an_grammar_a', 'kg_creating_an_grammar_b', 'kg_creating_an_grammar_v', 'kg_creating_an_grammar_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–°—É—Ä–æ–æ:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–¢—É—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç—Ç—ã —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑, —ç–º–∏ —Ç–µ–∫—à–µ—Ä“Ø“Ø–≥”© –∂”©–Ω”©—Ç“Ø“£“Ø–∑.",
        reply_markup=kb.option_buttons_for_creating_a_grammar_kg_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)



##############################################################
#                Creating a grammar test in ru               #
##############################################################

# Initial handler for entering question text
@router.callback_query(F.data == 'grammar_ru')
async def write_grammar_question_ru(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    sent_message = await callback_query.message.answer_photo(
        photo=utils.pictureForTheEditAnGrammerRU,
        caption='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞',
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(st.CreatGrammarQuestionsRU.create_question_ru)
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handler for entering grammar question text
@router.message(st.CreatGrammarQuestionsRU.create_question_ru)
async def get_question_text(message: Message, state: FSMContext):
    question_text = message.text
    await state.update_data(question_text=question_text, options={})

    if message.text == "/start":
        await user_account(message, state)
        return

    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    if await is_russian_sentence(question_text) == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ":
        sent_message = await message.answer(
            f"*–í–æ–ø—Ä–æ—Å:* {question_text}\n\n"
            f"*A) ............................*\n"
            f"–ë) ............................\n"
            f"–í) ............................\n"
            f"–ì) ............................\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ 'A':",
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsRU.create_option_a_ru)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        err_sentences = await is_russian_sentence(question_text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerRU,
            caption=f'_{err_sentences}._\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ:',
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(st.CreatGrammarQuestionsRU.create_question_ru)
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# General handler for options A, B, V, and G
async def get_option_grammar_ru(message: Message, state: FSMContext, option_key: str, next_state):
    data = await state.get_data()
    options = data.get('options', {})
    options[option_key] = message.text
    await state.update_data(options=options)

    sent_message_add_screen_ids['user_messages'].append(message.message_id)
    await delete_previous_messages(message)

    option_text = {
        'A': '–ë',
        'B': '–í',
        'V': '–ì',
        'G': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    }

    if await is_russian_sentence(message.text) == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ":
        # Checking if it's the last option to display the final message
        if option_key == 'G':
            sent_message = await message.answer(
                f"*–í–æ–ø—Ä–æ—Å:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"{option_text[option_key]}",
                reply_markup=kb.option_buttons_for_creating_a_grammar_ru,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            sent_message = await message.answer(
                f"*–í–æ–ø—Ä–æ—Å:* {data['question_text']}\n\n"
                f"A) {options.get('A', '............................')}\n"
                f"–ë) {options.get('B', '............................')}\n"
                f"–í) {options.get('V', '............................')}\n"
                f"–ì) {options.get('G', '............................')}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ '{option_text[option_key]}':",
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(next_state)
    else:
        err_sentences = await is_russian_sentence(message.text)
        sent_message = await message.answer_photo(
            photo=utils.pictureForTheEditAnGrammerRU,
            caption=f'_{err_sentences}._\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–Ω–æ–≤–æ:',
            parse_mode=ParseMode.MARKDOWN
        )

    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Handlers for entering options A, B, V, and G
@router.message(st.CreatGrammarQuestionsRU.create_option_a_ru)
async def get_option_a(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'A', st.CreatGrammarQuestionsRU.create_option_b_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_b_ru)
async def get_option_b(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'B', st.CreatGrammarQuestionsRU.create_option_v_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_v_ru)
async def get_option_v(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'V', st.CreatGrammarQuestionsRU.create_option_g_ru)


@router.message(st.CreatGrammarQuestionsRU.create_option_g_ru)
async def get_option_g(message: Message, state: FSMContext):
    if message.text == "/start":
        await user_account(message, state)
        return
    await get_option_grammar_ru(message, state, 'G', None)  # –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–π


# Handler for selecting the correct answer
@router.callback_query(F.data.in_(
    ['ru_creating_an_grammar_a', 'ru_creating_an_grammar_b', 'ru_creating_an_grammar_v', 'ru_creating_an_grammar_g']))
async def get_correct_option(callback_query: CallbackQuery, state: FSMContext):
    option_key = callback_query.data.split('_')[-1].upper()
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    if option_key == 'A':
        await state.update_data(correct_option='–ê')
    if option_key == 'B':
        await state.update_data(correct_option='–ë')
    if option_key == 'V':
        await state.update_data(correct_option='–í')
    if option_key == 'G':
        await state.update_data(correct_option='–ì')

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']

    sent_message = await callback_query.message.answer(
        f"*–í–æ–ø—Ä–æ—Å:* {question_text}\n"
        f"{'‚úÖ ' if option_key == 'A' else ''}A: {options['A']}\n"
        f"{'‚úÖ ' if option_key == 'B' else ''}–ë: {options['B']}\n"
        f"{'‚úÖ ' if option_key == 'V' else ''}–í: {options['V']}\n"
        f"{'‚úÖ ' if option_key == 'G' else ''}–ì: {options['G']}\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=kb.option_buttons_for_creating_a_grammar_ru_finish,
        parse_mode=ParseMode.MARKDOWN
    )
    sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)


# Write kg analogy questions to the DB
@router.callback_query(F.data == 'kg_send_an_analogy')
async def write_analogy_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=4, content=question_text, option_a=option_a,
                                          option_b=option_b,
                                          option_v=option_v, option_g=option_g, correct_option=correct_option,
                                          status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–°–∏–∑–¥–∏–Ω —Å—É—Ä–æ–æ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!'
                    '\n*+5 —Ä—É–±–∏–Ω* üíé –∫–æ—à—É–ª–¥—É.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω —Å—É—Ä–æ–æ –±–∞–∑–∞–¥–∞ –±–∞—Ä —ç–∫–µ–Ω!'
                    '\n–°—É—Ä–∞–Ω—ã—á, –±–∞—à–∫–∞ —Å—É—Ä–æ–æ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write ru analogy questions to the DB
@router.callback_query(F.data == 'ru_send_an_analogy')
async def write_analogy_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=3, content=question_text, option_a=option_a,
                                          option_b=option_b,
                                          option_v=option_v, option_g=option_g, correct_option=correct_option,
                                          status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'
                    '\n*+5 —Ä—É–±–∏–Ω–æ–≤* üíé –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏, –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                    '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write ru grammar questions to the DB
@router.callback_query(F.data == 'ru_send_an_grammar')
async def write_grammar_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=1, content=question_text, option_a=option_a,
                                          option_b=option_b,
                                          option_v=option_v, option_g=option_g, correct_option=correct_option,
                                          status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'
                    '\n*+5 —Ä—É–±–∏–Ω–æ–≤* üíé –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏, –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                    '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.',
            reply_markup=kb.to_user_account_ru,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)

# Write kg grammar questions to the DB
@router.callback_query(F.data == 'kg_send_an_grammar')
async def write_grammar_to_db(callback_query: CallbackQuery, state: FSMContext):
    sent_message_add_screen_ids['user_messages'].append(callback_query.message.message_id)
    await delete_previous_messages(callback_query.message)

    data = await state.get_data()
    question_text = data['question_text']
    options = data['options']
    user_id = callback_query.from_user.id
    correct_option = data['correct_option']

    option_a = options.get('A', '')
    option_b = options.get('B', '')
    option_v = options.get('V', '')
    option_g = options.get('G', '')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
    is_not_have = await rq.write_question(user_id=user_id, subject_id=2, content=question_text, option_a=option_a, option_b=option_b,
                            option_v=option_v, option_g=option_g, correct_option=correct_option, status="pending")
    if is_not_have:
        await rq.add_rubies(telegram_id=user_id, rubies_amount=5)

        sent_message = await callback_query.message.answer_photo(
            photo=utils.picturePlusFiveRubin,
            caption='–°–∏–∑–¥–∏–Ω —Å—É—Ä–æ–æ –∫–∞–±—ã–ª –∞–ª—ã–Ω–¥—ã!'
                    '\n*+5 —Ä—É–±–∏–Ω* üíé –∫–æ—à—É–ª–¥—É.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)
    else:
        sent_message = await callback_query.message.answer_photo(
            photo=utils.pictureBadRequests,
            caption='–°–∏–∑ –∂–∞–∑–≥–∞–Ω —Å—É—Ä–æ–æ –±–∞–∑–∞–¥–∞ –±–∞—Ä —ç–∫–µ–Ω!'
                    '\n–°—É—Ä–∞–Ω—ã—á, –±–∞—à–∫–∞ —Å—É—Ä–æ–æ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.',
            reply_markup=kb.to_user_account_kg,
            parse_mode=ParseMode.MARKDOWN
        )
        sent_message_add_screen_ids['bot_messages'].append(sent_message.message_id)